{"version":3,"sources":["ApiUtils/OpenCageApi.js","ApiUtils/GeoLocationApi.js","WeatherInfoSPA/CityWeatherInfo.js","WeatherInfoSPA/ErrorInfo.js","WeatherInfoSPA/Loader.js","ApiUtils/DarkSkyApi.js","WeatherMainPage/WeatherMainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["BuildLocationNam","result","formatted","components","town","country","buildRequestUrl","latitude","longitude","API_URL","encodeURIComponent","getLocationName","a","locationName","requestUrl","axios","get","response","data","results","errorMsg","message","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","lat","coords","lon","getLatLon","CityWeatherInfoComp","props","id","className","locationData","name","color","icon","weatherInfo","autoplay","temperature","summary","ErrorInfoComp","LoaderComp","fahrenheitToCelsiusRounded","tempF","tempC","Math","round","fixIconString","toUpperCase","replaceAll","url","urlProxy","Axios","resp","currently","getWeatherInfo","key","openCageApi","undefined","callWeatherApi","DarkSkyApi","WeatherMainPageComp","useState","myLatitude","setMyLatitude","myLongitude","setMyLongitude","currentTabLatitude","setCurrentTabLatitude","currentTabLongitude","setCurrentTabLongitude","currentTabLocationName","setCurrentTabLocationName","myLocationSelected","setMyLocationSelected","currentTabId","setCurrentTabId","useQuery","myLocationNameData","myLocationNameStatus","status","myLocationNameError","error","weatherApiData","weatherApiDataStatus","weatherApiError","useEffect","geoLocationApi","obj","getMyCurrentLocation","then","changeLocation","e","cityName","target","onClick","classNames","disabled","ErrorInfo","Loader","CityWeatherInfo","componenetToShow","App","WeatherMainPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.55a2c458.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nvar API_KEY = '9dbde76d6a3b406c81e5dee6c2363c3a'\r\nvar API_URL = 'https://api.opencagedata.com/geocode/v1/json';\r\n\r\n\r\nconst getLocationName = async(latitude, longitude) => {\r\n\r\n    let locationName = `${latitude} , ${longitude}`;\r\n\r\n    let requestUrl = buildRequestUrl(latitude, longitude);\r\n\r\n    try{\r\n        let response = await axios.get(requestUrl);\r\n\r\n        if(response){\r\n            locationName = BuildLocationNam(response.data.results[0]);\r\n        }\r\n    }\r\n    catch(err){\r\n        return { errorMsg : err.message}\r\n    }\r\n\r\n    return locationName;\r\n}\r\n\r\nfunction BuildLocationNam(result){\r\n    if(result.formatted != \"\"){\r\n        return result.formatted;\r\n    }else if(result.components.town != \"\" && result.components.country != \"\"){\r\n        return `${result.components.town} , ${result.components.country}`;\r\n    }\r\n    else{\r\n        return `My Location`\r\n    }\r\n}\r\n\r\nfunction buildRequestUrl(latitude, longitude) {\r\n    return  API_URL \r\n        + '?' \r\n        + 'key=' + API_KEY \r\n        + '&q=' + encodeURIComponent (latitude + ',' + longitude) \r\n        + '&language=en' \r\n        + '&pretty=1'\r\n        + '&no_annotations=1';\r\n}\r\n\r\nexport default {getLocationName}","function getCoordinates() {\r\n    return new Promise(function(resolve, reject) {\r\n        return navigator.geolocation.getCurrentPosition(resolve, reject);\r\n    });\r\n}\r\n\r\nasync function getLatLon() {\r\n    try{\r\n        let position = await getCoordinates();\r\n        return { lat : position.coords.latitude, lon : position.coords.longitude };\r\n    }\r\n    catch(err) {\r\n        return { errorMsg : err.message};\r\n    }\r\n}\r\n\r\nexport default {getLatLon}","import React, { useEffect, useState } from 'react'\r\nimport Skycons from 'react-skycons'\r\n\r\n\r\n\r\n\r\nconst CityWeatherInfoComp = (props) => {\r\n\r\n    function isAndriod(){\r\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n    } \r\n\r\n    function updateWeatherIcon(response){\r\n\r\n        let skyconsOptions = {\r\n            \"color\" : \"white\"\r\n        }\r\n\r\n        if(isAndriod()){\r\n            skyconsOptions.resizeClear = true;\r\n        }\r\n\r\n        var skycons = new Skycons(skyconsOptions);\r\n        skycons.set(\"weather_icon\", response.currently.icon);\r\n        skycons.play();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div id=\"weather_infobox\" className=\"weather-info\">\r\n                \r\n                <div id=\"weather_location\" className=\"weather-info__location\">{props.locationData.name}</div>\r\n                \r\n                <div className=\"weather-info__icon\">\r\n                    {/* <canvas id=\"weather_icon\" width=\"128\" height=\"128\"></canvas> */}\r\n                    <Skycons \r\n                        color='white' \r\n                        icon={props.weatherInfo.icon}\r\n                        autoplay={true}/>\r\n                </div>\r\n                \r\n                <div className=\"weather-info__temperature\">\r\n                    <span id=\"weather_temp\">{props.weatherInfo.temperature}</span> \r\n                    <span>&#8451;</span>\r\n                </div>\r\n                \r\n                <div id=\"weather_description\" className=\"weather-info__description\">{props.weatherInfo.summary}</div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CityWeatherInfoComp;","import React from 'react'\r\nimport '../Styles/style.css'\r\n\r\n\r\nconst ErrorInfoComp = (props) => {\r\n\r\n    return(\r\n        <div id=\"error_text\" className=\"error-text\">\r\n            {props.errorMsg}\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default ErrorInfoComp;","import React from 'react'\r\nimport '../Styles/style.css'\r\n\r\n\r\nconst LoaderComp = () => {\r\n\r\n    return(\r\n        <div id=\"loader\" className=\"loader\">\r\n                <div className=\"lds-ripple\"><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoaderComp;","\r\nimport Axios from 'axios'\r\n\r\n\r\nfunction fahrenheitToCelsiusRounded (tempF) {\r\n    let tempC = (5/9) * (tempF - 32);\r\n    return Math.round(tempC);\r\n}\r\n\r\nfunction fixIconString(icon){\r\n    return  icon.toUpperCase().replaceAll('-', '_');\r\n}\r\n\r\nasync function getWeatherInfo(lat, lon) {\r\n\r\n    var urlProxy = \"https://cors-anywhere.herokuapp.com/\";\r\n    var urlApi = \"https://api.darksky.net/forecast/557ecd4b8c8bbba02f4a50afe884934b/\";\r\n\r\n    // call the darksky.net api\r\n    var url = urlProxy + urlApi + lat + \",\" + lon;\r\n\r\n    try{\r\n        let resp = await Axios.get(url);\r\n\r\n        return {\r\n            temperature : fahrenheitToCelsiusRounded(resp.data.currently.temperature),\r\n            icon : fixIconString(resp.data.currently.icon),\r\n            summary : resp.data.currently.summary,\r\n        }\r\n    }\r\n    catch(err){\r\n        return { errorMsg : err.message};\r\n    }\r\n}\r\n\r\nexport default {getWeatherInfo}","import React, { useState } from 'react'\r\nimport '../Styles/style.css'\r\nimport { useEffect } from 'react'\r\nimport openCageApi from '../ApiUtils/OpenCageApi'\r\nimport geoLocationApi from '../ApiUtils/GeoLocationApi'\r\nimport CityWeatherInfoComp from '../WeatherInfoSPA/CityWeatherInfo'\r\nimport ErrorInfoComp from '../WeatherInfoSPA/ErrorInfo'\r\nimport LoaderComp from '../WeatherInfoSPA/Loader'\r\nimport DarkSkyApi from '../ApiUtils/DarkSkyApi'\r\nimport { useQuery } from 'react-query'\r\nimport classNames from 'classnames'\r\n\r\n\r\nconst getLocationName = async(key, lat, lon) => {\r\n\r\n    let resp = await openCageApi.getLocationName(lat, lon);\r\n    if(resp.errorMsg != undefined){\r\n        throw resp.errorMsg;\r\n    }\r\n\r\n    return  {\r\n        name : resp,\r\n        latitude : lat,\r\n        longitude : lon\r\n    };\r\n}\r\n\r\nconst callWeatherApi = async(key, lat, lon) => {\r\n    let resp = await DarkSkyApi.getWeatherInfo(lat, lon);\r\n    if(resp.errorMsg != undefined){\r\n        throw resp.errorMsg;\r\n    }\r\n    \r\n    return resp;\r\n}\r\n\r\n\r\nconst WeatherMainPageComp = (props) => {\r\n\r\n    const [myLatitude, setMyLatitude] = useState(undefined);\r\n    const [myLongitude, setMyLongitude] = useState(undefined);\r\n    const [currentTabLatitude, setCurrentTabLatitude] = useState(undefined);\r\n    const [currentTabLongitude, setCurrentTabLongitude] = useState(undefined);\r\n    const [currentTabLocationName, setCurrentTabLocationName] = useState(\"\");\r\n    const [myLocationSelected, setMyLocationSelected] = useState(true);\r\n    const [currentTabId, setCurrentTabId] = useState(\"tab1\");\r\n\r\n    const { data: myLocationNameData, status: myLocationNameStatus, error: myLocationNameError } = \r\n        useQuery(['getMyLocationName', myLatitude, myLongitude], getLocationName);\r\n\r\n    const { data: weatherApiData, status: weatherApiDataStatus, error: weatherApiError } = \r\n        useQuery(['callWeatherApi', currentTabLatitude, currentTabLongitude], callWeatherApi);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // Get current latitude & longitude\r\n        const getMyCurrentLocation = async() => {\r\n            let obj = await geoLocationApi.getLatLon();\r\n            return obj;\r\n        }\r\n\r\n        getMyCurrentLocation().then(obj => {\r\n            setMyLatitude(obj.lat);\r\n            setMyLongitude(obj.lon);\r\n            setCurrentTabLatitude(obj.lat);\r\n            setCurrentTabLongitude(obj.lon);\r\n        });\r\n    },[])\r\n\r\n\r\n    const changeLocation = async(e, lat, lon, cityName)=> {\r\n        \r\n        setCurrentTabId(e.target.id);\r\n\r\n        setCurrentTabLatitude(lat);\r\n        setCurrentTabLongitude(lon);\r\n        setCurrentTabLocationName(cityName);\r\n\r\n        if(cityName === \"My Location\"){\r\n            setMyLocationSelected(true);\r\n        }\r\n        else{\r\n            setMyLocationSelected(false);\r\n        }\r\n    }\r\n\r\n    const componenetToShow= () =>{\r\n\r\n        if (myLocationNameStatus === 'error') {\r\n            // Error getting 'MyLocation' name\r\n            return <ErrorInfoComp errorMsg={myLocationNameError} />\r\n        }\r\n        else if(weatherApiDataStatus === 'error'){\r\n            // Error getting current city weather information\r\n            return <ErrorInfoComp errorMsg={weatherApiError} />\r\n        }\r\n        else if (myLocationNameStatus === 'loading' || weatherApiDataStatus === 'loading') {\r\n            // Data is still being fetched from API\r\n            return <LoaderComp/>\r\n        }\r\n        else if (myLocationSelected && myLocationNameStatus === 'success' && weatherApiDataStatus === 'success') {\r\n            // 'my location' scenario success - display fetched data\r\n            return <CityWeatherInfoComp locationData={myLocationNameData} weatherInfo={weatherApiData}  />\r\n        }\r\n        else if (weatherApiDataStatus  === 'success') {\r\n            // 'other city' scenario success - display fetched data\r\n            let locationName ={\r\n                name: currentTabLocationName, \r\n                latitude : currentTabLatitude,\r\n                longitude : currentTabLongitude\r\n            }\r\n\r\n            return <CityWeatherInfoComp locationData={locationName} weatherInfo={weatherApiData}  />\r\n        }\r\n        else{\r\n            return <div>Unknown error</div>\r\n        }\r\n    }\r\n \r\n    return (\r\n        <div>\r\n            \r\n            <h1>The Weather Page</h1>\r\n\r\n            <div id=\"tabs_wrapper\" className=\"tabs-wrapper\">\r\n                <button id=\"tab1\" onClick={(e) => changeLocation(e, myLatitude, myLongitude, \"My Location\")} \r\n                    className={classNames({'tab': true, 'selected' : currentTabId === 'tab1'})} disabled={currentTabId === \"tab1\"}>My Location</button>\r\n                <button id=\"tab2\" onClick={(e) => changeLocation(e, \"51.507351\", \"-0.127758\", \"London\")} \r\n                    className={classNames({'tab': true, 'selected' : currentTabId === 'tab2'})} disabled={currentTabId === \"tab2\"}>London</button>\r\n                <button id=\"tab3\" onClick={(e) => changeLocation(e, \"48.856613\", \"2.352222\", \"Paris\")} \r\n                    className={classNames({'tab': true, 'selected' : currentTabId === 'tab3'})} disabled={currentTabId === \"tab3\"}>Paris</button>\r\n                <button id=\"tab4\" onClick={(e) => changeLocation(e, \"40.712776\", \"-74.005974\", \"New York\")} \r\n                    className={classNames({'tab': true, 'selected' : currentTabId === 'tab4'})} disabled={currentTabId === \"tab4\"}>New York</button>\r\n                <button id=\"tab5\" onClick={(e) => changeLocation(e, \"55.755825\", \"37.617298\", \"Moskva\")} \r\n                    className={classNames({'tab': true, 'selected' : currentTabId === 'tab5'})} disabled={currentTabId === \"tab5\"}>Moskva</button>\r\n            </div>\r\n\r\n            <div>\r\n                {componenetToShow()}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherMainPageComp;","import React from 'react';\nimport './App.css';\nimport WeatherMainPageComp from './WeatherMainPage/WeatherMainPage';\n\nfunction App() {\n  return (\n    <div>\n      <WeatherMainPageComp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}